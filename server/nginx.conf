user  www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;


events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}


http {
    # more_set_he aders 'Server: Hypercore';

    default_type  text/plain;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # don't send the nginx version number in error pages and Server header
    server_tokens off;


    add_header Referrer-Policy "strict-origin";
    add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()";
    add_header Content-Security-Policy "script-src 'self'; style-src: 'self';";

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # add_header Strict-Transport-Security max-age=15768000;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options deny;

    include          mime.types;

    gzip             on;
    gzip_comp_level  3;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types       text/plain application/javascript text/css;

    # brotli            on;
    # brotli_comp_level 6;
    # brotli_static     on;
    # brotli_types      text/plain text/css application/javascript image/svg+xml;

    open_file_cache          max=100 inactive=300s;
    open_file_cache_valid    120s;
    open_file_cache_min_uses 5;
    open_file_cache_errors   off;


    server {
        listen         80;
        server_name    pizza.town;
        # return         301 https://$server_name$request_uri;

        location /static/ {
          root /var/www/static/;
        }

        location / {
          proxy_pass http://127.0.0.1:4000;
        }

        location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
          expires 365d;
        }
    }


    # server {
    #     listen 443 ssl http2;
    #     server_name pizza.town;

    #     location / {
    #       proxy_pass http://127.0.0.1:4000;
    #     }

        # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
        # ssl_certificate /etc/letsencrypt/live/roeb.uk/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/roeb.uk/privkey.pem;
        # ssl_session_timeout 1d;
        # ssl_session_cache shared:SSL:50m;
        # ssl_session_tickets off;

        # ssl_dhparam /etc/letsencrypt/live/roeb.uk/dhparam.pem;

        # # IE11+
        # ssl_protocols TLSv1.1 TLSv1.2;
        # ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
        # ssl_prefer_server_ciphers on;

        # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
        # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
        # resolver 8.8.8.8;
        # ssl_stapling on;
        # ssl_stapling_verify on;

        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

        # location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
        #     expires 365d;
        # }

    # }
}
